;;9.1  What will Scheme print? Figure it out yourself before you try it ;;on the computer.

;;> (lambda (x) (+ (* x 3) 4))

#<compound-procedure>

;;> ((lambda (x) (+ (* x 3) 4)) 10)

34

;;> (every (lambda (wd) (word (last wd) (bl wd)))
         '(any time at all))

(yan etim ta lal)

;;> ((lambda (x) (+ x 3)) 10 15)


Error (this procedure can only take 1 argument, we've fed it 2!)

;;9.2  Rewrite the following definitions so as to make the implicit ;;lambda explicit.

;;(define (second stuff)
;;  (first (bf stuff)))

(define (second stuff)
(lamba (x) (first (bf x))))


;;(define (make-adder num)
;;  (lambda (x) (+ num x)))

;;9.3  What does this procedure do?

;;(define (let-it-be sent)
;;  (accumulate (lambda (x y) y) sent))

;;It outputs whatever the last word/letter in the sentence/word is.


;;9.4 The following program doesn't work. Why not? Fix it.

;;(define (who sent)
;;  (every describe '(pete roger john keith)))

;;(define (describe person)
;;  (se person sent))
;;It's supposed to work like this:

;;> (who '(sells out))
;;(pete sells out roger sells out john sells out keith sells out)


(define (who sent)
   (every (lambda (person) (se person sent)) '(pete roger john keith)))

;;9.5  Write prepend-every:

;;> (prepend-every 's '(he aid he aid))
;;(SHE SAID SHE SAID)

;;> (prepend-every 'anti '(dote pasto gone body))
;;(ANTIDOTE ANTIPASTO ANTIGONE ANTIBODY)


(define (prepend-every letter sent)
(every (lambda (wd) (word letter wd)) sent))

;;9.6  Write a procedure sentence-version that takes a function f as its ;;argument and returns a function g. f should take a single word as ;;argument. g should take a sentence as argument and return the sentence ;;formed by applying f to each word of that argument.

;;> ((sentence-version first) '(if i fell))
;;(I I F)

;;> ((sentence-version square) '(8 2 4 6))
;;(64 4 16 36)

(define (sentence-version function)
(lambda (argument) (every function argument)))


;;9.7  Write a procedure called letterwords that takes as its arguments a ;;letter and a sentence. It returns a sentence containing only those ;;words from the argument sentence that contain the argument letter:

;;> (letterwords 'o '(got to get you into my life))
;;(GOT TO YOU INTO)

(define (letterwords letter sent)
(keep (lambda (wd) (member? letter wd)) sent))

;;9.8  Suppose we're writing a program to play hangman. In this game one ;;player has to guess a secret word chosen by the other player, one ;;letter at a time. You're going to write just one small part of this ;;program: a procedure that takes as arguments the secret word and the ;;letters guessed so far, returning the word in which the guessing ;;progress is displayed by including all the guessed letters along with ;;underscores for the not-yet-guessed ones:

;;> (hang 'potsticker 'etaoi)
;;_OT_TI__E_
;;Hint: You'll find it helpful to use the following procedure that ;;determines how to display a single letter:

;;(define (hang-letter letter guesses)
;;  (if (member? letter guesses)
;;      letter
;;      '_))

(define (hang theword guesses)
(every (lambda (letter) (if (member? letter guesses) letter '_)) theword))

;;9.9  Write a procedure common-words that takes two sentences as ;;arguments and returns a sentence containing only those words that ;;appear both in the first sentence and in the second sentence.

(define (common-words sent1 sent2)
(keep (lambda (wd) (and (member? wd sent1) (member? wd sent2))) sent1)) 

;;9.11  Write a procedure unabbrev that takes two sentences as arguments. ;;It should return a sentence that's the same as the first sentence, ;;except that any numbers in the original sentence should be replaced ;;with words from the second sentence. A number 2 in the first sentence ;;should be replaced with the second word of the second sentence, a 6 ;;with the sixth word, and so on.

;;> (unabbrev '(john 1 wayne fred 4) '(bill hank kermit joey))
;;(JOHN BILL WAYNE FRED JOEY)

;;> (unabbrev '(i 3 4 tell 2) '(do you want to know a secret?))
;;(I WANT TO TELL YOU)

(if (number? letter)
(item letter sent2)
letter)

(define (unabbrev sent1 sent2)
(every (lambda (letter) (if (number? letter) (item letter sent2) letter)) sent1))

;;9.12  Write a procedure first-last whose argument will be a sentence. ;;It should return a sentence containing only those words in the argument ;;sentence whose first and last letters are the same:

;;> (first-last '(california ohio nebraska alabama alaska massachusetts))
;;(OHIO ALABAMA ALASKA)

(if (equal? (first wd) (last wd)) wd '())

(define (first-last sent)
(every (lambda (wd) (if (equal? (first wd) (last wd)) wd '())) sent))

;;9.13  Write a procedure compose that takes two functions f and g as ;;arguments. It should return a new function, the composition of its ;;input functions, which computes f(g(x)) when passed the argument x.

;;> ((compose sqrt abs) -25)
;;5

;;> (define second (compose first bf))

;;> (second '(higher order function))
;;ORDER

(define (compose fun1 fun2) 
(lambda (vari) (fun1 (fun2 vari))))

;;9.14  Write a procedure substitute that takes three arguments, two ;;words and a sentence. It should return a version of the sentence, but ;;with every instance of the second word replaced with the first word:

;;> (substitute 'maybe 'yeah '(she loves you yeah yeah yeah))
;;(SHE LOVES YOU MAYBE MAYBE MAYBE)

(define (substitute wd1 wd2 sent)
(every (lambda (wd) (if (equal? wd wd2) wd1 wd)) sent))

;;9.15  Many functions are applicable only to arguments in a certain ;;domain and result in error messages if given arguments outside that ;;domain. For example, sqrt may require a nonnegative argument in a ;;version of Scheme that doesn't include complex numbers. (In any version ;;of Scheme, sqrt will complain if its argument isn't a number at all!) ;;Once a program gets an error message, it's impossible for that program ;;to continue the computation.

;;Write a procedure type-check that takes as arguments a one-argument ;;procedure f and a one-argument predicate procedure pred. Type-check ;;should return a one-argument procedure that first applies pred to its ;;argument; if that result is true, the procedure should return the value ;;computed by applying f to the argument; if pred returns false, the new ;;procedure should also return #f:

;;> (define safe-sqrt (type-check sqrt number?))

;;> (safe-sqrt 16)
;;4

;;> (safe-sqrt 'sarsaparilla)
;;#F

(define (type-check f pred)
(lambda (n) (if (pred n) (f n) #f)))

;;9.16  In the language APL, most arithmetic functions can be applied ;;either to a number, with the usual result, or to a vector—the APL name ;;for a sentence of numbers—in which case the result is a new vector in ;;which each element is the result of applying the function to the ;;corresponding element of the argument. For example, the function sqrt ;;applied to 16 returns 4 as in Scheme, but sqrt can also be applied to a ;;sentence such as (16 49) and it returns (4 7).

;;Write a procedure aplize that takes as its argument a one-argument ;;procedure whose domain is numbers or words. It should return an APLized ;;procedure that also accepts sentences:

;;> (define apl-sqrt (aplize sqrt))

;;> (apl-sqrt 36)
;;6

;;> (apl-sqrt '(1 100 25 16))
;;(1 10 5 4)

(define (aplize funct)
(lambda (vari) (if (number? vari) (funct vari) (every funct vari))))

;;9.17  Write keep in terms of every and accumulate.

(define (keep pred?)
(every (lambda (vari) (if (pred? vari) vari '())) 